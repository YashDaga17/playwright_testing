name: Playwright Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18, 20]
        browser: [chromium, firefox, webkit]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Build application
      run: npm run build

    - name: Start application in background
      run: |
        npm start &
        npx wait-on http://localhost:3000 --timeout 60000

    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

  # Separate job for visual regression tests
  visual-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium

    - name: Run visual regression tests
      run: npx playwright test --grep="@visual" --project=chromium
      env:
        CI: true

    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: test-results/
        retention-days: 7

  # Job to deploy test reports to GitHub Pages
  deploy-report:
    needs: test
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Prepare Pages content
      run: |
        mkdir -p _site
        # Copy the latest chromium report as main report
        if [ -d "artifacts/playwright-report-20-chromium" ]; then
          cp -r artifacts/playwright-report-20-chromium/* _site/
        fi
        # Create index with links to all reports
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Test Reports</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                .report-link { display: block; padding: 10px; margin: 10px 0; background: #f5f5f5; text-decoration: none; border-radius: 5px; }
                .report-link:hover { background: #e5e5e5; }
            </style>
        </head>
        <body>
            <h1>Playwright Test Reports</h1>
            <h2>Latest Reports</h2>
        EOF
        # Add links to all available reports
        for dir in artifacts/playwright-report-*; do
          if [ -d "$dir" ]; then
            basename=$(basename "$dir")
            echo "<a href='$basename/' class='report-link'>$basename</a>" >> _site/index.html
            cp -r "$dir" "_site/$basename"
          fi
        done
        echo "</body></html>" >> _site/index.html

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3

    - name: Deploy to Pages
      id: deployment
      uses: actions/deploy-pages@v4
