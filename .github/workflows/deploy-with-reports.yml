name: Deploy with Test Reports

on:
  workflow_run:
    workflows: ["Playwright Tests"]
    types: [completed]
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.workflow_run.conclusion == 'success'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build React app
      run: npm run build
      env:
        CI: false

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Download test reports (if available)
      if: github.event_name == 'workflow_run'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Get artifacts from the completed workflow
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id || 'null' }}
            });
            
            console.log('Found artifacts:', artifacts.data.artifacts.map(a => a.name));
            
            // Download blob reports for merging
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.startsWith('blob-report-')) {
                console.log(`Downloading ${artifact.name}...`);
                
                try {
                  const download = await github.rest.actions.downloadArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                    archive_format: 'zip'
                  });
                  
                  fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
                  console.log(`Downloaded ${artifact.name}.zip`);
                } catch (error) {
                  console.error(`Failed to download ${artifact.name}:`, error);
                }
              }
            }
          } catch (error) {
            console.log('No test artifacts found or workflow_run not available');
          }

    - name: Install Playwright for report merging
      if: github.event_name == 'workflow_run'
      run: npm install -g @playwright/test

    - name: Extract and merge test reports
      if: github.event_name == 'workflow_run'
      run: |
        # Create directories
        mkdir -p blob-reports
        mkdir -p build/test-reports
        
        # Extract blob reports
        for zip in blob-report-*.zip; do
          if [ -f "$zip" ]; then
            echo "Extracting $zip..."
            unzip -q "$zip" -d blob-reports/
          fi
        done
        
        # Merge reports if we have blob reports
        if [ -d "blob-reports" ] && [ "$(ls -A blob-reports)" ]; then
          echo "Merging test reports..."
          npx playwright merge-reports --reporter html blob-reports/
          
          # Copy merged report to build directory
          if [ -d "playwright-report" ]; then
            cp -r playwright-report/* build/test-reports/
            echo "Test reports merged and copied to build/test-reports/"
          fi
        else
          echo "No blob reports found to merge"
        fi

    - name: Create test reports index (if no reports available)
      run: |
        if [ ! -f "build/test-reports/index.html" ]; then
          mkdir -p build/test-reports
          cat > build/test-reports/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Test Reports</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; 
                    text-align: center; 
                    padding: 40px; 
                    background: #f8f9fa;
                    color: #2d3748;
                }
                .container { 
                    background: white; 
                    padding: 40px; 
                    border-radius: 8px; 
                    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                    max-width: 600px;
                    margin: 0 auto;
                }
                .link { 
                    display: inline-block; 
                    padding: 12px 24px; 
                    background: #4299e1; 
                    color: white; 
                    text-decoration: none; 
                    border-radius: 6px; 
                    margin: 10px;
                    transition: background 0.2s;
                }
                .link:hover { background: #2b6cb0; }
                .secondary-link { background: #718096; }
                .secondary-link:hover { background: #4a5568; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üé≠ Playwright Test Reports</h1>
                <p>Test reports will be available here after running tests.</p>
                <p>Push code changes to trigger automated testing and report generation.</p>
                
                <div style="margin-top: 30px;">
                    <a href="../" class="link">üè† Back to React App</a>
                    <a href="https://github.com/YashDaga17/playwright_testing/actions" class="link secondary-link">‚öôÔ∏è View Actions</a>
                </div>
                
                <div style="margin-top: 30px; font-size: 0.9em; color: #718096;">
                    <p><strong>Available Test Commands:</strong></p>
                    <code>npm run test:e2e</code> - Run all tests<br>
                    <code>npm run test:e2e:ui</code> - Interactive UI mode<br>
                    <code>npm run test:e2e:report</code> - Show local reports
                </div>
            </div>
        </body>
        </html>
        EOF
        fi

    - name: Add .nojekyll file
      run: echo "" > build/.nojekyll

    - name: Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: build

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
