name: PR Preview & Tests

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Build application
      run: npm run build

    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: true

    - name: Generate test summary
      if: always()
      run: |
        echo "## 🎭 Playwright Test Results" >> $GITHUB_STEP_SUMMARY
        
        # Check if test results exist
        if [ -f "test-results/results.json" ]; then
          # Parse test results from JSON (basic check)
          if grep -q '"status":"passed"' test-results/results.json; then
            echo "✅ Tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some tests failed." >> $GITHUB_STEP_SUMMARY
          fi
        elif [ -f "playwright-report/index.html" ]; then
          echo "✅ Test report generated successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Tests failed to complete. Check the logs above." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "📊 [View detailed report in artifacts]" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage:" >> $GITHUB_STEP_SUMMARY
        echo "- Navigation tests" >> $GITHUB_STEP_SUMMARY
        echo "- Todo functionality tests" >> $GITHUB_STEP_SUMMARY
        echo "- UI component tests" >> $GITHUB_STEP_SUMMARY
        echo "- Accessibility tests" >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with test results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🎭 Playwright Test Results\n\n';
          
          try {
            // Try to read test results from JSON file
            let testsStatus = 'unknown';
            let failedTests = [];
            
            if (fs.existsSync('test-results/results.json')) {
              const results = JSON.parse(fs.readFileSync('test-results/results.json', 'utf8'));
              const stats = results.stats || {};
              
              if (stats.passed > 0 && (stats.failed || 0) === 0) {
                testsStatus = 'passed';
                comment += `✅ **All ${stats.passed} tests passed!**\n\n`;
              } else {
                testsStatus = 'failed';
                comment += `❌ **Tests failed:** ${stats.failed || 0} failed, ${stats.passed || 0} passed\n\n`;
              }
              
              comment += `📊 **Test Summary:**\n`;
              comment += `- Total: ${stats.passed + (stats.failed || 0)} tests\n`;
              comment += `- Passed: ${stats.passed || 0}\n`;
              comment += `- Failed: ${stats.failed || 0}\n`;
              comment += `- Duration: ${Math.round((stats.duration || 0) / 1000)}s\n\n`;
            } else {
              comment += '❌ Test results not found. Tests may have failed to complete.\n\n';
            }
            
            comment += '📊 Detailed reports are available in the Actions artifacts.\n\n';
            comment += '### Test Coverage:\n';
            comment += '- ✅ Navigation tests\n';
            comment += '- ✅ Todo functionality tests\n';
            comment += '- ✅ UI component tests\n';
            comment += '- ✅ Accessibility tests\n\n';
            
            if (testsStatus === 'failed') {
              comment += '**Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.**\n';
            }
            
          } catch (error) {
            comment += '❌ Error reading test results. Please check the workflow logs.\n';
            console.error('Error processing test results:', error);
          }
          
          // Delete previous comments from this bot to avoid spam
          try {
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            for (const existingComment of comments.data) {
              if (existingComment.user.type === 'Bot' && existingComment.body.includes('🎭 Playwright Test Results')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                });
              }
            }
          } catch (error) {
            console.log('Could not delete previous comments:', error.message);
          }
          
          // Post new comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-playwright-report
        path: playwright-report/
        retention-days: 7

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-test-results
        path: test-results/
        retention-days: 7
